[{"/home/cesar/Escritorio/develop/Health-Exercise/src/index.js":"1","/home/cesar/Escritorio/develop/Health-Exercise/src/App.jsx":"2","/home/cesar/Escritorio/develop/Health-Exercise/src/components/Login.jsx":"3","/home/cesar/Escritorio/develop/Health-Exercise/src/components/Inicio.jsx":"4","/home/cesar/Escritorio/develop/Health-Exercise/src/components/Menu.jsx":"5","/home/cesar/Escritorio/develop/Health-Exercise/src/components/Registro.jsx":"6","/home/cesar/Escritorio/develop/Health-Exercise/src/firebaseConfig.js":"7"},{"size":266,"mtime":1619555012682,"results":"8","hashOfConfig":"9"},{"size":928,"mtime":1619657325214,"results":"10","hashOfConfig":"9"},{"size":2958,"mtime":1619577387723,"results":"11","hashOfConfig":"9"},{"size":117,"mtime":1619495238843,"results":"12","hashOfConfig":"9"},{"size":1604,"mtime":1619657327838,"results":"13","hashOfConfig":"9"},{"size":7185,"mtime":1619657272277,"results":"14","hashOfConfig":"9"},{"size":628,"mtime":1619569417740,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1w3kask",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"/home/cesar/Escritorio/develop/Health-Exercise/src/index.js",[],["33","34"],"/home/cesar/Escritorio/develop/Health-Exercise/src/App.jsx",[],"/home/cesar/Escritorio/develop/Health-Exercise/src/components/Login.jsx",["35"],"import React, { useState } from 'react';\nimport '../assets/css/App.css';\nimport { useHistory } from 'react-router-dom';\nimport { auth } from '../firebaseConfig';\n\nimport '../App'\nconst Login = () =>{\n\n    const historial = useHistory()\n    const [email, setEmail] = useState('')\n    const [pass, setPass] = useState('')\n    const [msgerror, setMsgError] = useState(null)\n    \n    const LoginUsuario = (e) => {\n        e.preventDefault()\n        auth.signInWithEmailAndPassword(email, pass)\n        // .then( (r) => console.log(r))\n        .then( (userCredential) => {\n          // luego de logearse mandamos a las targetas\n          var user = userCredential.user;\n          alert(user)\n          historial.push('/')\n          \n         \n        })\n        .catch( (err) => {\n          // auth/wrong-password\n          if(err.code == 'auth/wrong-password'){\n            setMsgError('password incorrecto')\n          }\n          //para mas errores\n          alert('contrasena incorrecta')\n        })\n      }\n      \n    return (\n        <div className=' row mt-15'>\n\n            <div className='col'></div>\n            <div className='col bg-t'>\n\n                <form onSubmit={LoginUsuario} className='form-group'>\n\n\n                    <div className=\"input-group mb-3\">\n                        <div className='input-group-prepend'>\n                            <span className=\"input-group-text\"> Correo</span>\n                        </div>\n                        <input\n                            className='form-control'\n                            placeholder='Introduce tu correo electronico'\n                            type=\"email\"\n                            name=\"correo\"\n                            onChange={(e) => { setEmail(e.target.value)}}\n                        />\n                    </div>\n\n                    <div className=\"input-group mb-3\">\n                        <div className='input-group-prepend'>\n                            <span className=\"input-group-text\">Contraseña</span>\n                        </div>\n                        <input\n                            className='form-control'\n                            placeholder='Introduce una contraseña'\n                            type=\"password\"\n                            name=\"password\"\n                            onChange={(e) => { setPass(e.target.value)}}\n                        />\n                    </div>\n\n                    <button \n                    onClick= {LoginUsuario}\n                    className=\"btn btn-info btn-block mt-4\">\n                        Iniciar Sesion\n                   </button>\n\n                </form>\n\n                {\n          msgerror != null\n          ? (\n            <div>\n              yarn\n              {msgerror}\n            </div>\n          )\n          : (\n            <span></span>\n          )\n        }\n            </div>\n            <div className='col'></div>\n\n        </div>\n    );\n}\n\n\nexport default Login","/home/cesar/Escritorio/develop/Health-Exercise/src/components/Inicio.jsx",[],"/home/cesar/Escritorio/develop/Health-Exercise/src/components/Menu.jsx",[],"/home/cesar/Escritorio/develop/Health-Exercise/src/components/Registro.jsx",["36","37","38","39"],"import React, { useState, useEffect } from 'react';\nimport '../assets/css/App.css';\nimport { store } from '../firebaseConfig';\nimport { toast } from \"react-toastify\";\n\n\n\nconst Registro = () => {\n\n\n\n  const [currentId, setCurrentId] = useState(\"\");\n  \n  \n\n  const initialStateValues = {\n    Nombres: '',\n    Apellidos: '',\n    Edad: null,\n    Peso: null,\n    Email: '',\n    Password: '',\n  };\n\n  const [values, setValues] = useState(initialStateValues);\n  const [sexo,setSexo]=useState(\"\");\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setValues({ ...values, [name]: value });\n   \n    \n  };\n\n\n  const registrarUsuario = async () => {\n    try {\n\n      await store.collection(\"registro\").doc().set(values);\n      toast(\"Usuario Registrado\", {\n        type: \"success\",\n      });\n\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const validNomAp = (str) => {\n    var pattern = new RegExp(\n\n      \"[A-Za-z0-9]{5,30}\"\n\n\n    );\n    return !!pattern.test(str);\n  };\n\n  const validEdad = (str) => {\n    var pattern = new RegExp(\n\n      \"\"\n    );\n    return !!pattern.test(str);\n  };\n  const validPeso = (str) => {\n    var pattern = new RegExp(\n\n      \"\"\n    );\n    return !!pattern.test(str);\n  };\n\n  const validEmail = (str) => {\n    var pattern = new RegExp(\n\n      \"^[_a-z0-9-]+(.[_a-z0-9-]+)*@[a-z0-9-]+(.[a-z0-9-]+)*(.[a-z]{2,4})$\"\n\n    );\n    return !!pattern.test(str);\n  };\n  const validPass = (str) => {\n    var pattern = new RegExp(\n\n      \"\"\n    );\n    return !!pattern.test(str);\n  };\n\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    //nombres\n    if (!validNomAp(values.Nombres)) {\n      return toast(\"Nombre Invalido\", { type: \"warning\", autoClose: 1000 });\n    }\n    //Apellidos\n    if (!validNomAp(values.Apellidos)) {\n      return toast(\"Apellidos Invalido\", { type: \"warning\", autoClose: 1000 });\n    }\n    //edad\n    if (!validEdad(values.Edad)) {\n      return toast(\"Edad Invalido\", { type: \"warning\", autoClose: 1000 });\n    }\n\n    //peso\n    if (!validPeso(values.Peso)) {\n      return toast(\"Peso Invalido\", { type: \"warning\", autoClose: 1000 });\n    }\n    //validacion Correo\n    if (!validEmail(values.Email)) {\n      return toast(\"Correo Invalido\", { type: \"warning\", autoClose: 1000 });\n    }\n    ///Contrasenia\n    if (!validPass(values.Password)) {\n      return toast(\"Contrasenia Invalido\", { type: \"warning\", autoClose: 1000 });\n    }\n\n\n    registrarUsuario(values);\n    setValues({ ...initialStateValues });\n  };\n\n  const getLinkById = async (id) => {\n    const doc = await store.collection(\"registro\").doc(id).get();\n    setValues({ ...doc.data() });\n  };\n\n  useEffect(() => {\n    if (currentId === \"\") {\n      setValues({ ...initialStateValues });\n    } else {\n      getLinkById(currentId);\n    }\n   \n  }, [currentId]);\n\n\n\n\n\n  return (\n    <div className='row mt-5'>\n\n      <div className='col'></div>\n      <div className='col bg-registro'>\n\n        <form className='form-group' id=\"formulario\" onSubmit={handleSubmit}>\n\n          <div className=\"input-group mb-3\">\n            <div className='input-group-prepend'>\n              <span className=\"input-group-text\">Nombres</span>\n            </div>\n            <input\n              className='form-control'\n              placeholder='Introduce tu nombre'\n              type=\"text\"\n              onChange={handleInputChange}\n              value={values.Nombres}\n              name=\"Nombres\"\n              required\n              //pattern=\"[A-Za-z]{3,30}\"\n              title=\"Letras. Tamaño mínimo: 3. Tamaño máximo: 30\"\n\n            />\n          </div>\n\n          <div className=\"input-group mb-3\">\n            <div className='input-group-prepend'>\n              <span className=\"input-group-text\">Apellidos</span>\n            </div>\n            <input\n              className='form-control'\n              placeholder='Introduce tu apellido'\n              type=\"text\"\n              onChange={handleInputChange}\n              value={values.Apellidos}\n              name=\"Apellidos\"\n              required\n              //pattern=\"[A-Za-z]{3,30}\"\n              title=\"Letras. Tamaño mínimo: 3. Tamaño máximo: 30\"\n            />\n          </div>\n\n\n          <div className=\"input-group mb-3\">\n            <div className='input-group-prepend'>\n              <span className=\"input-group-text\">Datos</span>\n            </div>\n            <input\n              className='form-control'\n              placeholder='Edad'\n              type=\"number\"\n              onChange={handleInputChange}\n              value={values.Edad}\n              name=\"Edad\"\n              minLength=\"10\"\n              maxLength=\"60\"\n            />\n            <input\n              className='form-control'\n              placeholder='Peso'\n              type=\"number\"\n              onChange={handleInputChange}\n              value={values.Peso}\n              name=\"Peso\" \n              minLength=\"40\"\n              maxLength=\"150\"\n              />\n\n          </div>\n\n          <div className=\"form-check form-check-inline mb-3\">\n            <div className='input-group-prepend '>\n              <span className=\"input-group-text mg-r\">Sexo</span>\n            </div>\n            <input\n              className='form-check-input'\n              type=\"radio\"\n              onChange={ handleInputChange}\n              name=\"Sexo\" \n              value='mujer'\n              \n            />\n            <label className=\"form-check-label form-check form-check-inline text-white\" for=\"inlineRadio1\">Mujer</label>\n            \n            <input\n              className='form-check-input'\n              type=\"radio\"\n              onChange={handleInputChange}\n              name=\"Sexo\" \n              value='hombre'\n              \n            />\n            <label className=\"form-check-label form-check form-check-inline text-white\" for=\"inlineRadio2\">Hombre</label>\n\n          </div>\n\n\n          <div className=\"input-group mb-3\" >\n            <div className='input-group-prepend'>\n              <span className=\"input-group-text\"> Correo</span>\n            </div>\n            <input\n              className='form-control'\n              placeholder='Introduce tu correo electronico'\n              type=\"email\"\n              onChange={handleInputChange}\n              value={values.Email}\n              name=\"Email\" />\n          </div>\n\n          <div className=\"input-group mb-3\">\n            <div className='input-group-prepend'>\n              <span className=\"input-group-text\">Contraseña</span>\n            </div>\n            <input\n              className='form-control'\n              placeholder='Introduce una contraseña'\n              type=\"password\"\n              onChange={handleInputChange}\n              value={values.Password}\n              name=\"Password\"\n              minlength=\"5\" \n              maxLength=\"30\" required\n              title=\"ingrese un minimo de 5 y maximo 30 caracteres\"\n            />\n\n          </div>\n\n          <input\n            className='btn btn-info btn-block mt-4'\n            value='Registrar Usuario'\n            type=\"submit\" />\n        </form>\n\n      </div>\n      <div className='col'></div>\n\n    </div>\n  )\n}\n\nexport default Registro","/home/cesar/Escritorio/develop/Health-Exercise/src/firebaseConfig.js",[],{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":28,"column":23,"nodeType":"46","messageId":"47","endLine":28,"endColumn":25},{"ruleId":"48","severity":1,"message":"49","line":12,"column":21,"nodeType":"50","messageId":"51","endLine":12,"endColumn":33},{"ruleId":"48","severity":1,"message":"52","line":26,"column":10,"nodeType":"50","messageId":"51","endLine":26,"endColumn":14},{"ruleId":"48","severity":1,"message":"53","line":26,"column":15,"nodeType":"50","messageId":"51","endLine":26,"endColumn":22},{"ruleId":"54","severity":1,"message":"55","line":134,"column":6,"nodeType":"56","endLine":134,"endColumn":17,"suggestions":"57"},"no-native-reassign",["58"],"no-negated-in-lhs",["59"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'setCurrentId' is assigned a value but never used.","Identifier","unusedVar","'sexo' is assigned a value but never used.","'setSexo' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'initialStateValues'. Either include it or remove the dependency array.","ArrayExpression",["60"],"no-global-assign","no-unsafe-negation",{"desc":"61","fix":"62"},"Update the dependencies array to be: [currentId, initialStateValues]",{"range":"63","text":"64"},[2792,2803],"[currentId, initialStateValues]"]